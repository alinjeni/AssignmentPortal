@model List<FacultySubmissionViewModel>
@{
    ViewData["Title"] = "Submissions Received";
}

<div class="container mt-4">

    <h3 class="mb-4 text-primary">@ViewData["Title"]</h3>

    <div class="row mb-4 g-3 align-items-center">
        <div class="col-md-6 mb-2">
            <div class="input-group shadow-sm">
                <input type="text" id="searchInput" placeholder="Search by student or assignment..." class="form-control" aria-label="Search submissions" />
            </div>
        </div>
        <div class="col-md-6 mb-2">
            <select id="gradeFilter" class="form-select shadow-sm" aria-label="Filter submissions by grade">
                <option value="all">All Submissions</option>
                <option value="graded">Graded</option>
                <option value="ungraded">Ungraded</option>
            </select>
        </div>
    </div>

    <div class="table-responsive shadow-sm rounded">
        <table class="table table-hover table-bordered align-middle shadow-sm" id="facultySubmissionsTable">
            <thead class="table-dark">
                <tr>
                    <th scope="col">Student</th>
                    <th scope="col">Assignment</th>
                    <th scope="col">Submitted At</th>
                    <th scope="col" class="text-center">Total Grade</th>
                </tr>
            </thead>
            <tbody>
                @if (Model == null || !Model.Any())
                {
                    <tr>
                        <td colspan="4" class="text-center text-muted fst-italic py-4">No submissions found.</td>
                    </tr>
                }
                else
                {
                    @foreach (var item in Model)
                    {
                        <tr class="submission-row" data-graded="@item.TotalGrade.HasValue.ToString().ToLower()">
                            <td>@item.StudentName</td>
                            <td>@item.AssignmentTitle</td>
                            <td>@item.SubmittedAt.ToString("g")</td>
                            <td class="text-center">
                                @if (item.TotalGrade.HasValue)
                                {
                                    <span class="badge bg-success px-3">@item.TotalGrade</span>
                                }
                                else
                                {
                                    <div class="d-flex flex-column align-items-center gap-1">
                                        <span class="badge bg-secondary px-3">Not Graded</span>
                                        <a href="@Url.Action("Details", "Submission", new { id = item.SubmissionId })" class="btn btn-sm btn-outline-success mt-1" title="View Submission">
                                            <i class="bi bi-eye"></i> View
                                        </a>
                                    </div>
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <nav aria-label="Page navigation example" class="mt-3">
        <ul class="pagination justify-content-center" id="paginationContainer"></ul>
    </nav>

</div>

@section Scripts {
    <script>
        const rows = Array.from(document.querySelectorAll(".submission-row"));
        const rowsPerPage = 20;
        let currentPage = 1;

        const searchInput = document.getElementById("searchInput");
        const gradeFilter = document.getElementById("gradeFilter");
        const paginationContainer = document.getElementById("paginationContainer");

        function applyFiltersAndPagination() {
            const searchTerm = searchInput.value.toLowerCase();
            const gradeSelection = gradeFilter.value;

            const filteredRows = rows.filter(row => {
                const student = row.cells[0].textContent.toLowerCase();
                const assignment = row.cells[1].textContent.toLowerCase();
                const isGraded = row.getAttribute("data-graded") === "true";

                const matchesSearch = student.includes(searchTerm) || assignment.includes(searchTerm);
                const matchesFilter =
                    gradeSelection === "all" ||
                    (gradeSelection === "graded" && isGraded) ||
                    (gradeSelection === "ungraded" && !isGraded);

                return matchesSearch && matchesFilter;
            });

            if(filteredRows.length === 0) {
                // Show a friendly "No results" row
                const tbody = document.querySelector("#facultySubmissionsTable tbody");
                tbody.innerHTML = `<tr><td colspan="4" class="text-center text-muted fst-italic py-4">No submissions match your criteria.</td></tr>`;
                paginationContainer.innerHTML = "";
                return;
            }

            renderPage(filteredRows, currentPage);
            renderPagination(filteredRows.length);
        }

        function renderPage(filteredRows, page) {
            const start = (page - 1) * rowsPerPage;
            const end = start + rowsPerPage;

            rows.forEach(row => row.style.display = "none");
            filteredRows.slice(start, end).forEach(row => row.style.display = "");
        }

        function renderPagination(totalRows) {
            const totalPages = Math.ceil(totalRows / rowsPerPage);
            paginationContainer.innerHTML = "";

            for (let i = 1; i <= totalPages; i++) {
                const li = document.createElement("li");
                li.className = "page-item" + (i === currentPage ? " active" : "");
                li.innerHTML = `<a class="page-link" href="#" aria-label="Go to page ${i}">${i}</a>`;
                li.addEventListener("click", function (e) {
                    e.preventDefault();
                    currentPage = i;
                    applyFiltersAndPagination();
                });
                paginationContainer.appendChild(li);
            }
        }

        searchInput.addEventListener("input", () => {
            currentPage = 1;
            applyFiltersAndPagination();
        });

        gradeFilter.addEventListener("change", () => {
            currentPage = 1;
            applyFiltersAndPagination();
        });

        window.onload = applyFiltersAndPagination;
    </script>
}
